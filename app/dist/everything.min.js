!function(){"use strict";angular.module("myApp",[]).factory("gameLogicService",function(){function a(a){var c=a.turnIndexBeforeMove,d=a.stateBeforeMove,e=a.move;try{var f=b(d,c,e);if(!angular.equals(e,f))return!1}catch(g){return console.log(g.message),!1}return!0}function b(a,b,i){var k=i[1].set.value;"INIT"!==k&&j(!z(a),"Game is over, you cannot move any more");var l;switch(k){case"INIT":var m=i[2].set.value;l=c(b,m);break;case"PICK":l=d(a,b);break;case"SEND":var n=i[2].set.value;l=e(a,b,n);break;case"RETRIEVE":var o=i[2].set.value;l=f(a,b,o);break;case"REPLACE":var p=i[3].set.value,q=i[4].set.value;l=g(a,b,p,q);break;case"MELD":l=h(a,b);break;default:throw new Error("Unexpected move")}return l}function c(a,b){j(0===a,"INIT: player"+a+" is trying to move, but only player0 can play the initial move."),j(4>=b&&b>=0,"INIT: nPlayers = "+b+" is given, but only 2 - 4 players are allowed.");for(var c=14,d=[{setTurn:{turnIndex:0}},{set:{key:"type",value:"INIT"}},{set:{key:"nplayers",value:b}},{set:{key:"tilesSentToBoardThisTurn",value:[]}},{set:{key:"board",value:n(void 0)}}],e=[],f=[],g=0;106>g;g++)e[g]={set:{key:"tile"+g,value:r(g)}},f[g]="tile"+g;for(var h=[],i=0;b>i;i++){for(var k=[],l=0;c>l;l++)k[l]=i*c+l;var m={set:{key:"player"+i,value:{initial:!1,tiles:k}}};h.push(m)}for(var o=[],p=0;b>p;p++)for(var q=0;c>q;q++)g=p*c+q,o[g]={setVisibility:{key:"tile"+g,visibleToPlayerIndices:[p]}};return d=d.concat(e),d.push({shuffle:{keys:f}}),d=d.concat(h),d=d.concat(o),d.push({set:{key:"nexttile",value:14*b}}),d}function d(a,b){var c=k(a,b);j(0===a.tilesSentToBoardThisTurn.length,"PICK: you cannot pick, since you sent tile to board."),j(y(a,a.board),"PICK: you should not mess up the board, if you want to pick");var d=a.nexttile;j(106>d,"Pick: picking tile"+d+", but tile index should be [0, 106]");var e=angular.copy(c);e.tiles.push(d);var f=[{setTurn:{turnIndex:l(b,a.nplayers)}},{set:{key:"type",value:"PICK"}},{setVisibility:{key:"tile"+d,visibleToPlayerIndices:[b]}},{set:{key:"player"+b,value:e}},{set:{key:"nexttile",value:d+1}}];return f}function e(a,b,c){var d=n(a.board),e=k(a,b),f=c.tile;j(void 0!==f,"Send: sending undefined tile"),j(-1!==e.tiles.indexOf(f),"Send: sending tile"+f+", but you should send your own tile: ["+e.tiles+"]");var g=c.row,h=c.col;q(d,g,h);var i=d[g][h];j(-1===i,"Send: board["+g+", "+h+"] is already occupied with tile"+d[g][h]+", you cannot send to this non-empty position in board.");var l=angular.copy(d);l[g][h]=f;var m=angular.copy(e);m.tiles.splice(m.tiles.indexOf(f),1);var o=angular.copy(a.tilesSentToBoardThisTurn);o.push(f);var r=[{setTurn:{turnIndex:b}},{set:{key:"type",value:"SEND"}},{set:{key:"todelta",value:c}},{set:{key:"player"+b,value:m}},{set:{key:"tilesSentToBoardThisTurn",value:o}},{set:{key:"board",value:l}},{setVisibility:{key:"tile"+f,visibleToPlayerIndices:p(b,a.nplayers)}}];return r}function f(a,b,c){var d=n(a.board),e=k(a,b),f=c.row,g=c.col;q(d,f,g);var h=d[f][g];j(-1!==h,"RETRIEVE: no tile in board["+f+","+g+"]");var i=a.tilesSentToBoardThisTurn.indexOf(h);j(-1!==i,"RETRIEVE: retrieving tile"+h+", but it is not your hand:["+a.tilesSentToBoardThisTurn+"].");var l=angular.copy(d);l[f][g]=-1;var m=angular.copy(e);m.tiles.push(h);var o=angular.copy(a.tilesSentToBoardThisTurn);o.splice(i,1);var p=[{setTurn:{turnIndex:b}},{set:{key:"type",value:"RETRIEVE"}},{set:{key:"fromdelta",value:c}},{set:{key:"player"+b,value:m}},{set:{key:"tilesSentToBoardThisTurn",value:o}},{set:{key:"board",value:l}},{setVisibility:{key:"tile"+h,visibleToPlayerIndices:[b]}}];return p}function g(a,b,c,d){var e=n(a.board);q(e,c.row,c.col);var f=e[c.row][c.col];j(-1!==f,"Replace: no tile in board["+c.row+","+c.col+"] "),q(e,d.row,d.col);var g=e[d.row][d.col];j(-1===g,"Replace: board[ "+d.row+","+d.col+"] has been occupied with tile"+g);var h=angular.copy(e);h[d.row][d.col]=f,h[c.row][c.col]=-1;var i=[{setTurn:{turnIndex:b}},{set:{key:"type",value:"REPLACE"}},{set:{key:"board",value:h}},{set:{key:"fromdelta",value:c}},{set:{key:"todelta",value:d}}];return i}function h(a,b){j(0!==a.tilesSentToBoardThisTurn.length,"MELD: you cannot meld since no tiles sent to board in this turn");for(var c=n(a.board),d=k(a,b),e=[],f=0;f<c.length;f++)e=e.concat(s(c[f]));for(var g=0;g<e.length;g++){var h=w(e[g],a),i=B(c,e[g][0]);j(t(h)||u(h),"Meld: board contains invalid sets from ("+(i.row+1)+","+(i.col+1)+") to ("+(i.row+1)+","+(i.col+h.length)+")")}if(d.initial===!1){var m=v(a,e,a.tilesSentToBoardThisTurn);j(m>=30,"Meld: score is "+m+", but initial meld needs at least 30 score (excluding 'joker' tile)")}var o,p=0===d.tiles.length&&0!==a.tilesSentToBoardThisTurn.length;o=p?{endMatch:{endMatchScores:x(b,a)}}:{setTurn:{turnIndex:l(b,a.nplayers)}};var q=angular.copy(d);q.initial=!0;var r=[o,{set:{key:"type",value:"MELD"}},{set:{key:"player"+b,value:q}},{set:{key:"tilesSentToBoardThisTurn",value:[]}}];return r}function i(a,b){var c=[];try{c.push(d(a,b))}catch(e){}return c}function j(a,b){if(a===!1)throw new Error(b)}function k(a,b){return m(b,a.nplayers),a["player"+b]}function l(a,b){m(a,b);var c=0;return c=a===b-1?0:a+1}function m(a,b){j(a>=0&&b>a,"checkPlayerIndex, [playerIndex:  "+a+", nPlayers: "+b)}function n(a){return void 0===a&&(a=o()),a}function o(){for(var a=[],b=0;b<C();b++){a.push([]);for(var c=0;c<D();c++)a[b].push(-1)}return a}function p(a,b){for(var c=[],d=0;b>d;d++)c.push(d);return c.splice(c.indexOf(a),1),c}function q(a,b,c){j(void 0!==b&&void 0!==c,"checkPositionWithinBoard: (row, col) = ("+b+","+c+") is undefined");var d=a.length,e=a[0].length;j(b>=0&&d>b&&c>=0&&e>c,"checkPositionWithinBoard: position out Of board, [row: "+b+", col: "+c+"]")}function r(a){j(a>=0&&106>a,"Illegal index");var b,c;return 104===a||105===a?(b="joker",c=0):(b=26>a?"blue":52>a?"red":78>a?"black":"orange",c=a%13+1),{color:b,score:c}}function s(a){for(var b=[],c=[],d=0;d<a.length;d++){var e=a[d];-1===e?0!==c.length&&(b.push(c),c=[]):(j(e>=0&&106>e,"tileIndex: "+e),c.push(e))}return 0!==c.length&&b.push(c),b}function t(a){var b=a.length;if(3>b||b>13)return!1;for(var c,d=0,e=0;b>e;e++){var f=a[e].color,g=a[e].score;if("joker"!==f){if(void 0===c&&(c=f),c!==f)return!1;if(0===d&&(d=g),g!==d)return!1}0!==d&&(d+=1)}return!0}function u(a){var b=a.length;if(3!==b&&4!==b)return!1;for(var c,d=[],e=0;b>e;e++){var f=a[e].color,g=a[e].score;if("joker"!==f){if(void 0===c&&(c=g),g!==c)return!1;if(-1!==d.indexOf(f))return!1;d.push(f)}}return!0}function v(a,b,c){for(var d=0,e=0;e<b.length;e++){for(var f=!0,g=0,h=0;h<b[e].length;h++){var i=b[e][h];if(g+=a["tile"+i].score,-1===c.indexOf(i)){f=!1;break}}f&&(d+=g)}return d}function w(a,b){for(var c=[],d=0;d<a.length;d++){var e=b["tile"+a[d]];c.push(e)}return c}function x(a,b){for(var c=[],d=0,e=b.nplayers,f=0;e>f;f++)if(f!==a){for(var g=b["player"+f].tiles,h=0,i=0;i<g.length;i++){var j=b["tile"+g[i]];h-="joker"===j.color?30:j.score}c[f]=h,d+=h}return c[a]=-d,c}function y(a,b){for(var c=[],d=0;d<b.length;d++)c=c.concat(s(b[d]));for(var e=0;e<c.length;e++){var f=w(c[e],a);if(!t(f)&&!u(f))return console.log("isMeldOk, invalid sets: ["+c[e]+"]"),!1}return!0}function z(a){return-1!==A(a)||E(a)}function A(a){for(var b=!1,c=-1,d=0;d<a.nplayers;d++)0===a["player"+d].tiles.length&&0===a.tilesSentToBoardThisTurn.length?c=d:b===!1&&(b=!0);return b?c:-1}function B(a,b){for(var c={},d=0;d<a.length;d++)for(var e=0;e<a[0].length;e++)if(a[d][e]===b){c.row=d,c.col=e;break}return c}function C(){return 6}function D(){return 18}function E(a){return void 0!==a&&console.log("initialed game"),!1}return{isMoveOk:a,getInitialMove:c,getTileByIndex:r,getPossibleMoves:i,createMove:b,getPickMove:d,getMeldMove:h,getSendMove:e,getRetrieveMove:f,getReplaceMove:g}})}(),function(){"use strict";angular.module("myApp").controller("GameCtrl",["$scope","$log","$window","$animate","$timeout","stateService","gameService","gameLogicService",function(a,b,c,d,e,f,g,h){function i(){var b=h.getPossibleMoves(a.state,a.turnIndex);g.makeMove(b[Math.floor(Math.random()*b.length)]),console.log("here"),a.debug="computer picks one tile",a.turnInfo="Your turn"}function j(b){if(k(b.stateAfterMove)){var c=0,d=2,f=h.getInitialMove(c,d);return void g.makeMove(f)}a.state=b.stateAfterMove,a.turnIndex=b.turnIndexAfterMove,a.board=b.stateAfterMove.board;var j=1-a.turnIndex;a.opponent_top=b.stateAfterMove["player"+j].tiles,a.curPlayer=b.stateAfterMove["player"+a.turnIndex].tiles,a.isYourTurn=b.yourPlayerIndex===b.turnIndexAfterMove,a.nexttile=b.stateAfterMove.nexttile,a.isYourTurn&&""===b.playersInfo[b.yourPlayerIndex].playerId&&(a.isYourTurn=!1,e(i,500))}function k(a){if(null===a)return!0;if(a.length>0)return!1;if(0===a.length)return!0;for(var b in a)if(hasOwnProperty.call(a,b))return!1;return!0}function l(b){return void 0!==b&&void 0!==a.state["tile"+b]?a.state["tile"+b]:void 0}function m(){a.activeTile=void 0,a.activeOrigin=void 0,a.from=void 0}a.rows=6,a.cols=18,window.e2e_test_stateService=f,a.tileClicked=function(b){if(a.isYourTurn)if(void 0!==a.activeTile&&"board"===a.activeOrigin&&void 0!==a.from){var c=a.from;try{var d=h.getRetrieveMove(a.state,a.turnIndex,c);g.makeMove(d)}catch(e){}m()}else a.activeTile=b,a.activeOrigin="curPlayer",a.debug="picking Tile"+b+" ("+l(b).color+","+l(b).score+")"},a.boardCellClicked=function(c,d){if(b.info(["Clicked on cell:",c,d]),a.debug="click board cell: ("+c+","+d+")",!a.isYourTurn)return!1;try{if(void 0===a.activeTile)-1!==a.board[c][d]&&(a.activeOrigin="board",a.activeTile=a.board[c][d],a.from={row:c,col:d},a.debug="picking Tile"+a.activeTile+" ("+l(a.activeTile).color+","+l(a.activeTile).score+" from: ("+c+","+d+")");else{var e,f={};if("board"===a.activeOrigin){var i=a.from;if(f={row:c,col:d},angular.equals(i,f))return!1;e=h.getReplaceMove(a.state,a.turnIndex,i,f),g.makeMove(e)}else"curPlayer"===a.activeOrigin&&(f={tile:a.activeTile,row:c,col:d},e=h.getSendMove(a.state,a.turnIndex,f),a.isYourTurn=!1,g.makeMove(e),a.debug="here");a.debug="Tile"+a.activeTile+" ("+l(a.activeTile).color+","+l(a.activeTile).score+") to: ("+c+","+d+")",m()}}catch(j){return m(),!1}},a.curPlayerAreaClicked=function(){if(a.debug=a.activeOrigin+" , "+a.activeTile+","+a.from,void 0!==a.activeTile&&"board"===a.activeOrigin&&void 0!==a.from){var b=a.from;try{var c=h.getRetrieveMove(a.state,a.turnIndex,b);g.makeMove(c)}catch(d){}m()}},a.shouldShowTileOnBoard=function(b,c){return void 0!==a.board&&-1!==a.board[b][c]},a.notJoker=function(a){var b=l(a);return void 0!==b&&"joker"!==b.color},a.isJoker=function(a){var b=l(a);return void 0!==b&&"joker"===b.color},a.pickBtnClicked=function(){if(a.isYourTurn){console.log("next: "+a.nexttile);try{var b=h.getPickMove(a.state,a.turnIndex);g.makeMove(b),a.debug="pick one tile"}catch(c){a.debug="cannot pick when tiles sent to board"}}},a.meldBtnClicked=function(){try{var b=h.getMeldMove(a.state,a.turnIndex);g.makeMove(b)}catch(d){a.debug="cannot meld",c.alert(d)}},a.getTileDataValue=function(a){var b="",c=l(a);return void 0!==c&&(b=c.color+" "+c.score),b},a.canDrag=function(b){return a.isYourTurn&&void 0!==l(b)?!0:!1},a.getTileScore=function(a){var b=l(a);return void 0!==b?b.score:""},a.getTileByIndex=l,g.setGame({gameDeveloperEmail:"jz1371@nyu.edu",minNumberOfPlayers:2,maxNumberOfPlayers:4,isMoveOk:h.isMoveOk,updateUI:j})}])}();
//# sourceMappingURL=everything.min.js.map